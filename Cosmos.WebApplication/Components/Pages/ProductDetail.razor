@page "/product"
@page "/product/{Id:int}"
@using Cosmos.Shared.Models
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@inject IWebApi WebApi
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject ISnackbar Snackbar

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudText Align="Align.Center" Typo="Typo.h3"><b>Product Detail</b></MudText>

@if (_product is not null)
{
    string imageLink = $"/images/{_product.Name}.jpg";

    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudImage Class="d-flex justify-center align-center" Src="@imageLink" Height="400" ObjectFit="ObjectFit.Cover"></MudImage>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudGrid>
                <!-- title -->
                <MudItem xs="12" sm="12">
                    <MudTextField Class="d-flex align-center justify-center mud-width-full py-8" @bind-Value="@_product.Name" Label="Title" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="12">
                    <MudTextField Class="d-flex align-center justify-center mud-width-full py-8" @bind-Value="@_product.Description" Label="Description" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <!-- price and stock side by side-->
                <MudItem xs="6">
                    <MudNumericField Class="d-flex align-center justify-center mud-width-full py-8" @bind-Value="@_product.Price" Label="Price/€" Variant="Variant.Outlined"></MudNumericField>
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField Class="d-flex align-center justify-center mud-width-full py-8" @bind-Value="@_product.Stock" Label="Stock" Variant="Variant.Outlined"></MudNumericField>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="3">
        </MudItem>
        <!-- buttons -->
        <MudItem xs="12" sm="3">
            <MudButton Class="d-flex align-center justify-right mud-width-full py-3" Variant="Variant.Filled" Color="Color.Success" @onclick="SaveProduct">Save</MudButton>
        </MudItem>
        <MudItem xs="12" sm="3">
            <MudButton Class="d-flex align-center justify-left mud-width-full py-3" Variant="Variant.Filled" Color="Color.Error" @onclick="DeleteProduct">Delete</MudButton>
        </MudItem>
        <MudItem xs="12" sm="3">
        </MudItem>

    </MudGrid>
}

@code {
    //NOTA:
    // @page "/product" -> se chamarmos esta, ele pensa que é para adicionar um novo produto
    // @page "/product/{Id:int}" -> enquanto esta serve para ver um produto específico

    [Parameter]
    public int? Id { get; set; }

    private Product _product { get; set; } = new Product();

    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
        {
            _product = await WebApi.GetProduct(Id.Value);
        }
        else
        {
            _product = new Product(); // Set to a new instance when adding a product
        }
    }

    private async void SaveProduct()
    {
        try
        {
            _product.CreatedAt = DateTime.Now;

            var response = await WebApi.UpdateProduct(_product);

            // Reset product data after successful update
            _product = new Product();
            StateHasChanged();

            Snackbar.Add("Succeeded in updating product", Severity.Success);
            NavigationManager.NavigateTo($"/", true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error", Severity.Error);
        }
    }


    private async void DeleteProduct()
    {
        if (_product is not null)
        {
            var confirmed = await Task.Run(() =>
                Confirm("Are you sure you want to delete this product?", "Confirm Delete"));

            if (confirmed)
            {
                await WebApi.DeleteProduct(_product.ProductId);
                Snackbar.Add("Product deleted successfully.", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            Snackbar.Add("No product to delete.", Severity.Warning);
        }
    }

    private bool Confirm(string message, string title)
    {
        // Simple confirmation dialog logic, you can replace this with MudBlazor dialog if needed
        return true; // Return `true` if confirmed
    }
}
