@page "/inventory"
@using System.Net.Http.Json
@using Cosmos.Shared.Data
@using Cosmos.Shared.Models
@inject HttpClient httpClient
@inject IWebApi WebApi

<MudText Align="Align.Center" Typo="Typo.h3"><b>Inventory</b></MudText>

@* <MudText Align="Align.Left" Typo="Typo.h5"><b>Category Resume</b></MudText>
<MudDataGrid Items="@Categories.Take(5)">
<MudDataGrid Items="@Categories.Take(5).Where(p=>p.CategoryId.Equals(2))">
    <Columns>
        <PropertyColumn Property="x => x.CategoryCode" Title="Top 5" />
        <PropertyColumn Property="x => x.Description" Title="Average book cost/€" />
        <PropertyColumn Property="x => x.Description" Title="Total stock" />
    </Columns>
</MudDataGrid> *@

<MudText Align="Align.Left" Typo="Typo.h5"><b>Categories</b></MudText>
<MudDataGrid Items="@Categories.Take(Categories.Count())">
    <Columns>
        <PropertyColumn Property="x => x.CategoryCode" Title="Name" />
        <PropertyColumn Property="x => x.Description" Title="Description" />
    </Columns>
</MudDataGrid>

<MudText Align="Align.Left" Typo="Typo.h5"><b>Products</b></MudText>
<MudDataGrid Items="@Products.Take(Products.Count())">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Title" />
        <PropertyColumn Property="x => x.Description" Title="Description" />
        <PropertyColumn Property="x => x.Category.CategoryCode" Title="Category" />
        <PropertyColumn Property="x => x.Price" Title="Price/€" />
        <PropertyColumn Property="x => x.Stock" Title="Stock" />
    </Columns>
</MudDataGrid> 

@code {
    //NOTA: 
    // 5 categorias com mais produtos
    // média de preço de custo numa categoria
    // valor do stock
    // outras que considere relevantes

    private IEnumerable<Product> Products = new List<Product>();
    private IEnumerable<Category> Categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Products = await WebApi.GetAllProducts();
            Categories = await WebApi.GetAllCategories();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    // private async void TotalStock()
    // {
    //     // var productToUpdate = await WebApi.GetAllProducts().FirstOrDefaultAsync(p => p.ProductId.Equals(product.ProductId));
    //     var productToUpdate = await WebApi.GetAllProducts().;



    // }
}
